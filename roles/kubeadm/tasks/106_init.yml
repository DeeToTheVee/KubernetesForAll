---

## Now, because we're trying to make this nice and simple, we initialised the first control-plane node with the defaults.
## After the first node is up, we copy the updated configs over to enable auditing etc then reload the kubelet.

- name: "[Init]: Copy kubeadm config"
  template:
    src: "kubeadm-config.yml.j2"
    dest: "/tmp/kubeadm-config.yml"

- name: "[Init]: Initialise kubeadm on first node"
  command: "kubeadm init --upload-certs --config=/tmp/kubeadm-config.yml"
  register: kubeadm_init

- name: "[Init]: Set token facts"
  set_fact:
    join_token: "{{ kubeadm_init.stdout | regex_search('((--token)\ [a-zA-Z0-9.]*)') }}"
    discovery_token: "{{ kubeadm_init.stdout | regex_search('(--discovery-token-ca-cert-hash)\ (sha256:[a-zA-Z0-9]*)') }}"
    control_token: "{{ kubeadm_init.stdout | regex_search('(-control-plane)\ (--certificate-key)\ [a-zA-Z0-9.]*') }}"
  when: kubeadm_init.changed

- name: "[Init]: Write Join Token out"
  copy:
    content: "kubeadm join {{hostvars[inventory_hostname]['ansible_host']}}:6443 {{join_token}} {{discovery_token}}"
    dest: /tmp/join_token
  when: kubeadm_init.changed
  register: kubeadm_write_join_token

# TODO: Token will expire so should delete this when done
- name: "[Init]: Fetch Join Token"
  fetch:
    src: /tmp/join_token
    dest: "{{KUBE_ADM_TOKEN_DIR}}/node_token"
    flat: yes
  when:
    - kubeadm_write_join_token

- name: "[Init]: Write Control Plane Token out"
  copy:
    content: "kubeadm join {{hostvars[inventory_hostname]['ansible_host']}}:6443 {{join_token}} {{discovery_token}} -{{control_token}}"
    dest: /tmp/control_plane_token
  when: kubeadm_init.changed
  register: kubeadm_write_control_plane_join

- name: "[Init]: Fetch Control Plane Token"
  fetch:
    src: /tmp/control_plane_token
    dest: "{{KUBE_ADM_TOKEN_DIR}}/control_plane_token"
    flat: yes
  when:
    - kubeadm_write_control_plane_join

#- name: "[Init]: Copy kubernetes configs"
#  copy:
#    src: "manifests/{{item}}"
#    dest: "/etc/kubernetes/manifests/{{item}}"
#  with_items:
#    - "kube-scheduler.yaml"
#    - "kube-controller-manager.yaml"
#  when: kubeadm_init.changed
#
#- name: "[Init]: Copy Kubernetes configs' templates"
#  template:
#    src: "manifests/{{item}}.j2"
#    dest: "/etc/kubernetes/manifests/{{item}}"
#  with_items:
##    - "kubeadm-config.yaml"
#    - "kube-apiserver.yaml"
#    - "etcd.yaml"
#  when: kubeadm_init.changed

#- name: "[Init]: Reload Kubelet"
#  service:
#    name: kubelet
#    state: restarted
#  when: kubeadm_init.changed

#- name: "[Init]: Pausing for 4 minutes to allow the cluster to come up"
#  pause:
#    seconds: 240
#  when: kubeadm_init.changed

#- name: "[Init]: Waiting for Ready state"
#  wait_for:
#    command: "kubectl get nodes -o json | jq -Mr '[.items[] | {name: .metadata.name, status: .status.conditions[].type}]' | jq -Mr '.[] | select(.name == \"{{inventory_hostname}}\" and .status == \"Ready\")'"
#  when: kubeadm_init
